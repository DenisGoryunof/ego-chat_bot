import os
import logging
import sqlite3
import asyncio
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ConversationHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.request import HTTPXRequest
from telegram.error import BadRequest
from dotenv import load_dotenv
from dateutil import parser

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ .env
ADMIN_MANICURE = int(os.getenv('ADMIN_MANICURE', 1373071419))
ADMIN_OTHER = int(os.getenv('ADMIN_OTHER', 1094720117))
ADMIN_ALL = int(os.getenv('ADMIN_ALL', 130208292))

# –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å—Ç—É–¥–∏–∏ –∏–∑ .env
STUDIO_CONTACTS = {
    'phone': os.getenv('STUDIO_PHONE', '+7 (978) 859-03-84'),
    'instagram': os.getenv('STUDIO_INSTAGRAM', '@ego_sevastopol'),
    'address': os.getenv('STUDIO_ADDRESS', '–≥.–°–µ–≤–∞—Ç–æ–ø–æ–ª—å, —É–ª 6-—è –ë–∞—Å—Ç–∏–æ–Ω–Ω–∞—è, –¥.40 2–π —ç—Ç–∞–∂'),
    'hours': os.getenv('STUDIO_HOURS', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 19:00')
}

# –ì—Ä—É–ø–ø—ã —É—Å–ª—É–≥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
MANICURE_SERVICES = ['üíÖ –ú–∞–Ω–∏–∫—é—Ä', 'üë£ –ü–µ–¥–∏–∫—é—Ä']
OTHER_SERVICES = ['üßñ –õ–∞–∑–µ—Ä–Ω–∞—è —ç–ø–∏–ª—è—Ü–∏—è', '‚òÄÔ∏è –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–≥–∞—Ä', 'üíÑ –í–∏–∑–∞–∂–∏—Å—Ç', 'üëÅÔ∏è –†–µ—Å–Ω–∏—Ü—ã']

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SERVICE, DATE, TIME, CONTACTS, CONFIRM = range(5)

# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä –≤ –º–∏–Ω—É—Ç–∞—Ö
SERVICE_DURATIONS = {
    'üßñ –õ–∞–∑–µ—Ä–Ω–∞—è —ç–ø–∏–ª—è—Ü–∏—è': 30,
    '‚òÄÔ∏è –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–≥–∞—Ä': 30,
    'üíÖ –ú–∞–Ω–∏–∫—é—Ä': 90,
    'üë£ –ü–µ–¥–∏–∫—é—Ä': 90,
    'üíÑ –í–∏–∑–∞–∂–∏—Å—Ç': 60,
    'üëÅÔ∏è –†–µ—Å–Ω–∏—Ü—ã': 60
}

# –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å—Ç—É–¥–∏–∏
WORKING_HOURS = {
    'start': 9,  # 9:00
    'end': 19    # 19:00
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE = '/home/xDenGor/ego-chat_bot/bookings.db'

class BeautySalonBot:
    def __init__(self, token):
        self.token = token
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTPXRequest –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.application = Application.builder().token(token).request(HTTPXRequest()).build()
        self.setup_handlers()
        self.init_database()
        
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS appointments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            service TEXT NOT NULL,
            date TEXT NOT NULL,
            duration INTEGER NOT NULL,
            contacts TEXT NOT NULL,
            timestamp TEXT NOT NULL,
            chat_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            status TEXT DEFAULT 'pending',
            reminder_sent_day BOOLEAN DEFAULT FALSE,
            reminder_sent_hour BOOLEAN DEFAULT FALSE
        )
        ''')
        
        conn.commit()
        conn.close()
        
    def setup_handlers(self):
        # ConversationHandler –¥–ª—è –∑–∞–ø–∏—Å–∏
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                SERVICE: [CallbackQueryHandler(self.get_service)],
                DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_date)],
                TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_time)],
                CONTACTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_contacts)],
                CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.confirm_booking)],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)],
        )
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(conv_handler)
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status))
        self.application.add_handler(CommandHandler("zapis", self.start))
        self.application.add_handler(CommandHandler("admin", self.admin_stats))
        self.application.add_handler(CommandHandler("menu", self.main_menu))
        self.application.add_handler(CommandHandler("contacts", self.show_contacts))
        self.application.add_handler(CommandHandler("mybookings", self.show_my_bookings))
        self.application.add_handler(CommandHandler("newbooking", self.new_booking))
        
        # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        self.application.add_handler(CommandHandler("bookings", self.show_all_bookings))
        self.application.add_handler(CommandHandler("bookings_today", self.show_today_bookings))
        self.application.add_handler(CommandHandler("bookings_tomorrow", self.show_tomorrow_bookings))
        self.application.add_handler(CommandHandler("confirm", self.confirm_booking_admin))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        self.application.add_handler(MessageHandler(filters.Regex(r'^/bookings_\d+$'), self.show_all_bookings))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        self.application.add_handler(MessageHandler(filters.Regex("^üìä –ú–æ–∏ –∑–∞–ø–∏—Å–∏$"), self.show_my_bookings))
        self.application.add_handler(MessageHandler(filters.Regex("^‚ÑπÔ∏è –û —Å—Ç—É–¥–∏–∏$"), self.about_studio))
        self.application.add_handler(MessageHandler(filters.Regex("^üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã$"), self.show_contacts))
        self.application.add_handler(MessageHandler(filters.Regex("^üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), self.main_menu))
        self.application.add_handler(MessageHandler(filters.Regex("^üíÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å$"), self.new_booking))
        self.application.add_handler(MessageHandler(filters.Regex("^üíÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É$"), self.start))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback query
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        self.application.add_handler(MessageHandler(filters.CONTACT, self.handle_contact))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        self.application.job_queue.run_repeating(self.check_reminders, interval=300, first=10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

    # ==================== –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ú–ê–°–¢–ï–†–û–í ====================

    async def show_all_bookings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        if update.effective_user.id not in [ADMIN_ALL, ADMIN_MANICURE, ADMIN_OTHER]:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            if update.message.text.startswith('/bookings_'):
                try:
                    page = int(update.message.text.split('_')[1])
                except:
                    page = 1
            else:
                page = int(context.args[0]) if context.args and context.args[0].isdigit() else 1
            
            conn = sqlite3.connect(DATABASE)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
            cursor.execute('''
            SELECT * FROM appointments 
            ORDER BY datetime(substr(date, 7, 4) || '-' || substr(date, 4, 2) || '-' || substr(date, 1, 2) || ' ' || substr(date, 12, 5))
            ''')
            
            bookings = cursor.fetchall()
            conn.close()
            
            if not bookings:
                await update.message.reply_text("üìä –ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
                return
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 10 –∑–∞–ø–∏—Å–µ–π
            per_page = 10
            total_pages = (len(bookings) + per_page - 1) // per_page
            page = max(1, min(page, total_pages))
            
            start_idx = (page - 1) * per_page
            end_idx = min(start_idx + per_page, len(bookings))
            
            bookings_text = f"üìã *–í–°–ï –ó–ê–ü–ò–°–ò (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):*\n\n"
            
            for i, booking in enumerate(bookings[start_idx:end_idx], start_idx + 1):
                status_emoji = "‚úÖ" if booking[11] == 'confirmed' else "‚è≥"
                status_text = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" if booking[11] == 'confirmed' else "–û–∂–∏–¥–∞–µ—Ç"
                
                bookings_text += (
                    f"{i}. {status_emoji} *{booking[1]}*\n"
                    f"   üìÖ {booking[2]}\n"
                    f"   üë§ {booking[9] or ''} {booking[10] or ''}\n"
                    f"   üìû {booking[4]}\n"
                    f"   üî¢ ‚Ññ{booking[0]}\n"
                    f"   üè∑Ô∏è –°—Ç–∞—Ç—É—Å: {status_text}\n"
                    f"   üë§ User ID: `{booking[7]}`\n\n"
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            if total_pages > 1:
                navigation_text = ""
                if page > 1:
                    navigation_text += f"‚¨ÖÔ∏è /bookings_{page-1} "
                if page < total_pages:
                    navigation_text += f"‚û°Ô∏è /bookings_{page+1}"
                
                bookings_text += navigation_text
            
            await update.message.reply_text(bookings_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π")

    async def show_today_bookings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        if update.effective_user.id not in [ADMIN_ALL, ADMIN_MANICURE, ADMIN_OTHER]:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            conn = sqlite3.connect(DATABASE)
            cursor = conn.cursor()
            
            today = datetime.now().strftime("%d.%m.%Y")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            cursor.execute('''
            SELECT * FROM appointments 
            WHERE date LIKE ?
            ORDER BY datetime(substr(date, 7, 4) || '-' || substr(date, 4, 2) || '-' || substr(date, 1, 2) || ' ' || substr(date, 12, 5))
            ''', (f"{today}%",))
            
            bookings = cursor.fetchall()
            conn.close()
            
            if not bookings:
                await update.message.reply_text(f"üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è ({today}) –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç")
                return
            
            bookings_text = f"üìã *–ó–ê–ü–ò–°–ò –ù–ê –°–ï–ì–û–î–ù–Ø ({today}):*\n\n"
            
            for i, booking in enumerate(bookings, 1):
                status_emoji = "‚úÖ" if booking[11] == 'confirmed' else "‚è≥"
                status_text = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" if booking[11] == 'confirmed' else "–û–∂–∏–¥–∞–µ—Ç"
                
                bookings_text += (
                    f"{i}. {status_emoji} *{booking[1]}*\n"
                    f"   üïê {booking[2].split()[1]}\n"
                    f"   üë§ {booking[9] or ''} {booking[10] or ''}\n"
                    f"   üìû {booking[4]}\n"
                    f"   üî¢ ‚Ññ{booking[0]}\n"
                    f"   üè∑Ô∏è –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
                )
            
            await update.message.reply_text(bookings_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π")

    async def show_tomorrow_bookings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        if update.effective_user.id not in [ADMIN_ALL, ADMIN_MANICURE, ADMIN_OTHER]:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            conn = sqlite3.connect(DATABASE)
            cursor = conn.cursor()
            
            tomorrow = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            cursor.execute('''
            SELECT * FROM appointments 
            WHERE date LIKE ?
            ORDER BY datetime(substr(date, 7, 4) || '-' || substr(date, 4, 2) || '-' || substr(date, 1, 2) || ' ' || substr(date, 12, 5))
            ''', (f"{tomorrow}%",))
            
            bookings = cursor.fetchall()
            conn.close()
            
            if not bookings:
                await update.message.reply_text(f"üìÖ –ù–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow}) –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç")
                return
            
            bookings_text = f"üìã *–ó–ê–ü–ò–°–ò –ù–ê –ó–ê–í–¢–†–ê ({tomorrow}):*\n\n"
            
            for i, booking in enumerate(bookings, 1):
                status_emoji = "‚úÖ" if booking[11] == 'confirmed' else "‚è≥"
                status_text = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" if booking[11] == 'confirmed' else "–û–∂–∏–¥–∞–µ—Ç"
                
                bookings_text += (
                    f"{i}. {status_emoji} *{booking[1]}*\n"
                    f"   üïê {booking[2].split()[1]}\n"
                    f"   üë§ {booking[9] or ''} {booking[10] or ''}\n"
                    f"   üìû {booking[4]}\n"
                    f"   üî¢ ‚Ññ{booking[0]}\n"
                    f"   üè∑Ô∏è –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
                )
            
            await update.message.reply_text(bookings_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π")

    async def confirm_booking_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        if update.effective_user.id not in [ADMIN_ALL, ADMIN_MANICURE, ADMIN_OTHER]:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏: /confirm_123")
            return
        
        try:
            booking_id = int(context.args[0])
            conn = sqlite3.connect(DATABASE)
            cursor = conn.cursor()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
            cursor.execute('''
            UPDATE appointments SET status = 'confirmed' WHERE id = ?
            ''', (booking_id,))
            
            if cursor.rowcount == 0:
                await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
                cursor.execute('SELECT * FROM appointments WHERE id = ?', (booking_id,))
                booking = cursor.fetchone()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                try:
                    confirmation_text = (
                        f"üéâ *–í–ê–®–ê –ó–ê–ü–ò–°–¨ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!*\n\n"
                        f"üíÖ *–£—Å–ª—É–≥–∞:* {booking[1]}\n"
                        f"üìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* {booking[2]}\n"
                        f"‚è∞ *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {booking[3]} –º–∏–Ω.\n\n"
                        f"üìû *–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:* {STUDIO_CONTACTS['phone']}\n"
                        f"üè† *–ê–¥—Ä–µ—Å:* {STUDIO_CONTACTS['address']}\n\n"
                        "‚ö†Ô∏è *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ–ø–∞–∑–¥—ã–≤–∞–π—Ç–µ!*"
                    )
                    
                    await context.bot.send_message(
                        chat_id=booking[6],
                        text=confirmation_text,
                        parse_mode='Markdown'
                    )
                    
                    await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å—å #{booking_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω.")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                    await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å—å #{booking_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞.")
            
            conn.commit()
            conn.close()
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")

    # ==================== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò ====================

    async def check_reminders(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            conn = sqlite3.connect(DATABASE)
            cursor = conn.cursor()
            
            current_time = datetime.now()
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å
            day_before = current_time + timedelta(days=1)
            day_before_date = day_before.strftime("%d.%m.%Y")
            
            cursor.execute('''
            SELECT * FROM appointments 
            WHERE date LIKE ? 
            AND reminder_sent_day = FALSE
            AND status = 'confirmed'
            ''', (f"{day_before_date}%",))
            
            day_reminders = cursor.fetchall()
            
            for appointment in day_reminders:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –¥–∞—Ç—ã
                    appointment_time = appointment[2].split()[1]
                    
                    reminder_text = (
                        f"‚è∞ *–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –ó–ê–ü–ò–°–ò*\n\n"
                        f"–ó–∞–≤—Ç—Ä–∞ –≤ {appointment_time} —É –≤–∞—Å –∑–∞–ø–∏—Å—å:\n"
                        f"üíÖ *–£—Å–ª—É–≥–∞:* {appointment[1]}\n"
                        f"üìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* {appointment[2]}\n"
                        f"‚è∞ *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {appointment[3]} –º–∏–Ω.\n\n"
                        f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å—Ç—É–¥–∏–∏:* {STUDIO_CONTACTS['phone']}\n"
                        f"üè† *–ê–¥—Ä–µ—Å:* {STUDIO_CONTACTS['address']}\n\n"
                        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ–ø–∞–∑–¥—ã–≤–∞–π—Ç–µ!"
                    )
                    
                    await context.bot.send_message(
                        chat_id=appointment[6],
                        text=reminder_text,
                        parse_mode='Markdown'
                    )
                    
                    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                    cursor.execute('''
                    UPDATE appointments SET reminder_sent_day = TRUE WHERE id = ?
                    ''', (appointment[0],))
                    
                    logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ #{appointment[0]}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å: {e}")
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å
            hour_before = current_time + timedelta(hours=1)
            hour_before_str = hour_before.strftime("%d.%m.%Y %H:%M")
            
            cursor.execute('''
            SELECT * FROM appointments 
            WHERE date = ?
            AND reminder_sent_hour = FALSE
            AND status = 'confirmed'
            ''', (hour_before_str,))
            
            hour_reminders = cursor.fetchall()
            
            for appointment in hour_reminders:
                try:
                    reminder_text = (
                        f"‚è∞ *–°–ö–û–†–û –ù–ê–ß–ù–ï–¢–°–Ø –ü–†–û–¶–ï–î–£–†–ê!*\n\n"
                        f"–ß–µ—Ä–µ–∑ 1 —á–∞—Å —É –≤–∞—Å –∑–∞–ø–∏—Å—å:\n"
                        f"üíÖ *–£—Å–ª—É–≥–∞:* {appointment[1]}\n"
                        f"üìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* {appointment[2]}\n"
                        f"‚è∞ *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {appointment[3]} –º–∏–Ω.\n\n"
                        f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å—Ç—É–¥–∏–∏:* {STUDIO_CONTACTS['phone']}\n"
                        f"üè† *–ê–¥—Ä–µ—Å:* {STUDIO_CONTACTS['address']}\n\n"
                        "üöó –£—Å–ø–µ–π—Ç–µ –≤–æ–≤—Ä–µ–º—è!"
                    )
                    
                    await context.bot.send_message(
                        chat_id=appointment[6],
                        text=reminder_text,
                        parse_mode='Markdown'
                    )
                    
                    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                    cursor.execute('''
                    UPDATE appointments SET reminder_sent_hour = TRUE WHERE id = ?
                    ''', (appointment[0],))
                    
                    logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ —á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ #{appointment[0]}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ —á–∞—Å: {e}")
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_reminders: {e}")

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        logger.info(f"Callback received: {query.data}")
        
        if query.data == 'back':
            await self.main_menu_from_query(query)
            return ConversationHandler.END
        
        # –ï—Å–ª–∏ —ç—Ç–æ callback –∏–∑ ConversationHandler (–≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏)
        if context.user_data.get('conversation'):
            await self.get_service(update, context)

    async def handle_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ Telegram"""
        if context.user_data.get('conversation') and context.user_data.get('state') == CONTACTS:
            contact = update.message.contact
            if contact:
                phone_number = contact.phone_number
                name = f"{contact.first_name or ''} {contact.last_name or ''}".strip()
                if name:
                    context.user_data['contacts'] = f"üë§ {name} üì± {phone_number}"
                else:
                    context.user_data['contacts'] = f"üì± {phone_number}"
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
                confirm_keyboard = [["‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"]]
                reply_markup = ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True)
                
                confirm_text = (
                    f"‚úÖ *–ü–†–û–í–ï–†–¨–¢–ï –î–ê–ù–ù–´–ï –ó–ê–ü–ò–°–ò:*\n\n"
                    f"üíÖ *–£—Å–ª—É–≥–∞:* {context.user_data['service']}\n"
                    f"üìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* {context.user_data['date']}\n"
                    f"‚è∞ *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {context.user_data['duration']} –º–∏–Ω.\n"
                    f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {context.user_data['contacts']}\n\n"
                    f"–í—Å—ë –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–ø–∏—Å—å?"
                )
                
                await update.message.reply_text(confirm_text, reply_markup=reply_markup, parse_mode='Markdown')
                context.user_data['state'] = CONFIRM
                return CONFIRM

    async def main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è conversation
        context.user_data.clear()
        
        keyboard = [
            ["üíÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É"],
            ["üìä –ú–æ–∏ –∑–∞–ø–∏—Å–∏", "‚ÑπÔ∏è –û —Å—Ç—É–¥–∏–∏"],
            ["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        if update.message:
            await update.message.reply_text(
                "üíñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç—É–¥–∏—é –∫—Ä–∞—Å–æ—Ç—ã!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        else:
            await update.callback_query.message.reply_text(
                "üíñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç—É–¥–∏—é –∫—Ä–∞—Å–æ—Ç—ã!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )

    async def send_admin_notification(self, context, booking_data, chat_id, username, contacts):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        service = booking_data['service']
        user_id = booking_data['user_id']
        
        if booking_data.get('username'):
            telegram_link = f"[@{booking_data['username']}](https://t.me/{booking_data['username']})"
        else:
            telegram_link = "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        notification_text = (
            "üéâ *–ù–û–í–ê–Ø –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ü–ò–°–¨*\n\n"
            f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {contacts or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
            f"üíÖ *–£—Å–ª—É–≥–∞:* {service}\n"
            f"üìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* {booking_data['date']}\n"
            f"‚è∞ *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {booking_data['duration']} –º–∏–Ω.\n"
            f"üî¢ *–ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏:* #{booking_data['id']}\n\n"
            f"üîó *Telegram:* {telegram_link}\n"
            f"üÜî *User ID:* `{user_id}`\n"
            f"üí¨ *–ß–∞—Ç ID:* `{chat_id}`\n\n"
            "‚ö†Ô∏è *–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!*"
        )
        
        admin_ids = set()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª—É–≥
        if service in MANICURE_SERVICES:
            admin_ids.add(ADMIN_MANICURE)
        if service in OTHER_SERVICES:
            admin_ids.add(ADMIN_OTHER)
        
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_ids.add(ADMIN_ALL)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in admin_ids:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=notification_text,
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    def get_next_booking_number(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏"""
        try:
            conn = sqlite3.connect(DATABASE)
            cursor = conn.cursor()
            cursor.execute('SELECT MAX(id) FROM appointments')
            result = cursor.fetchone()
            conn.close()
            return (result[0] or 0) + 1
        except:
            return 1

    def save_booking(self, booking_data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(DATABASE)
            cursor = conn.cursor()
            
            cursor.execute('''
            INSERT INTO appointments 
            (service, date, duration, contacts, timestamp, chat_id, user_id, username, first_name, last_name, status)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                booking_data['service'],
                booking_data['date'],
                booking_data['duration'],
                booking_data['contacts'],
                booking_data['timestamp'],
                booking_data['chat_id'],
                booking_data['user_id'],
                booking_data['username'],
                booking_data['first_name'],
                booking_data['last_name'],
                booking_data['status']
            ))
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
            return False

    def get_user_bookings(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ)"""
        try:
            conn = sqlite3.connect(DATABASE)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''
            SELECT * FROM appointments WHERE user_id = ? ORDER BY id DESC
            ''', (user_id,))
            
            bookings = []
            current_time = datetime.now()
            
            for row in cursor.fetchall():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–∞ –ª–∏ –∑–∞–ø–∏—Å—å
                try:
                    booking_datetime = datetime.strptime(row[2], "%d.%m.%Y %H:%M")
                    if booking_datetime >= current_time:
                        bookings.append({
                            'id': row[0],
                            'service': row[1],
                            'date': row[2],
                            'duration': row[3],
                            'contacts': row[4],
                            'timestamp': row[5],
                            'chat_id': row[6],
                            'user_id': row[7],
                            'username': row[8],
                            'first_name': row[9],
                            'last_name': row[10],
                            'status': row[11]
                        })
                except:
                    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                    bookings.append({
                        'id': row[0],
                        'service': row[1],
                        'date': row[2],
                        'duration': row[3],
                        'contacts': row[4],
                        'timestamp': row[5],
                        'chat_id': row[6],
                        'user_id': row[7],
                        'username': row[8],
                        'first_name': row[9],
                        'last_name': row[10],
                        'status': row[11]
                    })
            
            conn.close()
            return bookings
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {e}")
            return []

    def is_time_available(self, selected_datetime, duration_minutes):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏"""
        try:
            conn = sqlite3.connect(DATABASE)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
            cursor.execute('''
            SELECT date, duration FROM appointments 
            WHERE date LIKE ?
            ''', (f"{selected_datetime.strftime('%d.%m.%Y')}%",))
            
            for row in cursor.fetchall():
                try:
                    booking_datetime = datetime.strptime(row[0], "%d.%m.%Y %H:%M")
                    booking_end = booking_datetime + timedelta(minutes=row[1])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
                    if (selected_datetime < booking_end and selected_datetime + timedelta(minutes=duration_minutes) > booking_datetime):
                        conn.close()
                        return False
                except:
                    continue
            
            conn.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return True

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ - –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏"""
        context.user_data.clear()
        context.user_data['conversation'] = True
        
        keyboard = [
            [InlineKeyboardButton("üßñ –õ–∞–∑–µ—Ä–Ω–∞—è —ç–ø–∏–ª—è—Ü–∏—è", callback_data='epilation')],
            [InlineKeyboardButton("‚òÄÔ∏è –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–≥–∞—Ä", callback_data='tanning')],
            [InlineKeyboardButton("üíÖ –ú–∞–Ω–∏–∫—é—Ä", callback_data='manicure')],
            [InlineKeyboardButton("üë£ –ü–µ–¥–∏–∫—é—Ä", callback_data='pedicure')],
            [InlineKeyboardButton("üíÑ –í–∏–∑–∞–∂–∏—Å—Ç", callback_data='makeup')],
            [InlineKeyboardButton("üëÅÔ∏è –†–µ—Å–Ω–∏—Ü—ã", callback_data='lashes')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üíÖ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –∑–∞–ø–∏—Å–∏:",
            reply_markup=reply_markup
        )
        return SERVICE

    async def get_service(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
        query = update.callback_query
        await query.answer()
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ª—É–≥–∏: {query.data}")
        
        if query.data == 'back':
            await self.main_menu_from_query(query)
            return ConversationHandler.END
        
        service_map = {
            'epilation': 'üßñ –õ–∞–∑–µ—Ä–Ω–∞—è —ç–ø–∏–ª—è—Ü–∏—è',
            'tanning': '‚òÄÔ∏è –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–≥–∞—Ä',
            'manicure': 'üíÖ –ú–∞–Ω–∏–∫—é—Ä',
            'pedicure': 'üë£ –ü–µ–¥–∏–∫—é—Ä',
            'makeup': 'üíÑ –í–∏–∑–∞–∂–∏—Å—Ç',
            'lashes': 'üëÅÔ∏è –†–µ—Å–Ω–∏—Ü—ã'
        }
        
        service_name = service_map.get(query.data)
        if not service_name:
            await query.message.reply_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")
            return ConversationHandler.END
        
        context.user_data['service'] = service_name
        context.user_data['duration'] = SERVICE_DURATIONS.get(service_name, 60)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –∫–Ω–æ–ø–æ–∫
        today = datetime.now()
        tomorrow = today + timedelta(days=1)
        after_tomorrow = today + timedelta(days=2)
        
        date_keyboard = [
            [f"üìÖ –°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m')})", f"üìÖ –ó–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m')})"],
            [f"üìÖ –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ ({after_tomorrow.strftime('%d.%m')})", "üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞"],
            ["üîô –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º"]
        ]
        
        reply_markup = ReplyKeyboardMarkup(date_keyboard, resize_keyboard=True)
        
        await query.message.reply_text(
            f"üíÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {service_name}\n"
            f"‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {context.user_data['duration']} –º–∏–Ω.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=reply_markup
        )
        return DATE

    async def get_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
        try:
            user_input = update.message.text
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –¥–∞—Ç–∞–º–∏
            if user_input == "üîô –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º":
                await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏...", reply_markup=ReplyKeyboardRemove())
                await self.start(update, context)
                return SERVICE
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
            today = datetime.now()
            tomorrow = today + timedelta(days=1)
            after_tomorrow = today + timedelta(days=2)
            
            selected_date = None
            
            if "–°–µ–≥–æ–¥–Ω—è" in user_input:
                selected_date = today.date()
            elif "–ó–∞–≤—Ç—Ä–∞" in user_input:
                selected_date = tomorrow.date()
            elif "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in user_input:
                selected_date = after_tomorrow.date()
            elif "–î—Ä—É–≥–∞—è –¥–∞—Ç–∞" in user_input:
                await update.message.reply_text(
                    "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
                    "–ü—Ä–∏–º–µ—Ä: 25.12.2024",
                    reply_markup=ReplyKeyboardRemove()
                )
                return DATE
            else:
                # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞—Ç—É
                selected_date = parser.parse(user_input, dayfirst=True).date()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
            if selected_date < datetime.now().date():
                await update.message.reply_text(
                    "‚ùå –ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É:"
                )
                return DATE
            
            context.user_data['selected_date'] = selected_date.isoformat()
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è
            time_keyboard = [
                ["üïò 09:00", "üïô 10:00", "üïö 11:00"],
                ["üïõ 12:00", "üïê 13:00", "üïë 14:00"],
                ["üïí 15:00", "üïì 16:00", "üïî 17:00"],
                ["üïï 18:00", "üïñ 19:00", "üïó –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è"],
                ["üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç–∞"]
            ]
            
            reply_markup = ReplyKeyboardMarkup(time_keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                f"üìÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n\n"
                "üïê –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=reply_markup
            )
            return TIME
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: {e}")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
            today = datetime.now()
            tomorrow = today + timedelta(days=1)
            after_tomorrow = today + timedelta(days=2)
            
            date_keyboard = [
                [f"üìÖ –°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m')})", f"üìÖ –ó–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m')})"],
                [f"üìÖ –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ ({after_tomorrow.strftime('%d.%m')})", "üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞"],
                ["üîô –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º"]
            ]
            
            reply_markup = ReplyKeyboardMarkup(date_keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
                "–ü—Ä–∏–º–µ—Ä: 25.12.2024",
                reply_markup=reply_markup
            )
            return DATE

    async def get_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            user_input = update.message.text
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
            if user_input == "üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã":
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
                today = datetime.now()
                tomorrow = today + timedelta(days=1)
                after_tomorrow = today + timedelta(days=2)
                
                date_keyboard = [
                    [f"üìÖ –°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m')})", f"üìÖ –ó–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m')})"],
                    [f"üìÖ –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ ({after_tomorrow.strftime('%d.%m')})", "üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞"],
                    ["üîô –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º"]
                ]
                
                reply_markup = ReplyKeyboardMarkup(date_keyboard, resize_keyboard=True)
                
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                    reply_markup=reply_markup
                )
                return DATE
            
            selected_date = datetime.fromisoformat(context.user_data['selected_date']).date()
            selected_time = None
            
            if "–î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è" in user_input:
                await update.message.reply_text(
                    "üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM\n\n"
                    "–ü—Ä–∏–º–µ—Ä: 15:30",
                    reply_markup=ReplyKeyboardRemove()
                )
                return TIME
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç "üïò 09:00")
            if ":" in user_input:
                time_part = user_input.split()[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å —Å –≤—Ä–µ–º–µ–Ω–µ–º
                selected_time = datetime.strptime(time_part, "%H:%M").time()
            else:
                # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—Ä–µ–º—è
                selected_time = datetime.strptime(user_input, "%H:%M").time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
            if selected_time.hour < WORKING_HOURS['start'] or selected_time.hour >= WORKING_HOURS['end']:
                await update.message.reply_text(
                    f"‚ùå –°—Ç—É–¥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å {WORKING_HOURS['start']:02d}:00 –¥–æ {WORKING_HOURS['end']:02d}:00.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:"
                )
                return TIME
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            full_datetime = datetime.combine(selected_date, selected_time)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
            if not self.is_time_available(full_datetime, context.user_data['duration']):
                await update.message.reply_text(
                    "‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è:"
                )
                return TIME
            
            context.user_data['date'] = full_datetime.strftime("%d.%m.%Y %H:%M")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
            contacts_keyboard = [
                ["üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"],
                ["üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏"]
            ]
            reply_markup = ReplyKeyboardMarkup(contacts_keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "üìû *–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏?*\n\n"
                "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n"
                "‚Ä¢ üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                "‚Ä¢ üí¨ WhatsApp\n"
                "‚Ä¢ ‚úàÔ∏è Telegram (@username)\n"
                "‚Ä¢ üìß Email\n\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º'",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            context.user_data['state'] = CONTACTS
            return CONTACTS
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
            time_keyboard = [
                ["üïò 09:00", "üïô 10:00", "üïö 11:00"],
                ["üïõ 12:00", "üïê 13:00", "üïë 14:00"],
                ["üïí 15:00", "üïì 16:00", "üïî 17:00"],
                ["üïï 18:00", "üïñ 19:00", "üïó –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è"],
                ["üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"]
            ]
            
            reply_markup = ReplyKeyboardMarkup(time_keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM\n\n"
                "–ü—Ä–∏–º–µ—Ä: 15:30",
                reply_markup=reply_markup
            )
            return TIME

    async def get_contacts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        user_input = update.message.text
        
        if user_input == "üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏":
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
            time_keyboard = [
                ["üïò 09:00", "üïô 10:00", "üïö 11:00"],
                ["üïõ 12:00", "üïê 13:00", "üïë 14:00"],
                ["üïí 15:00", "üïì 16:00", "üïî 17:00"],
                ["üïï 18:00", "üïñ 19:00", "üïó –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è"],
                ["üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"]
            ]
            
            reply_markup = ReplyKeyboardMarkup(time_keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "üïê –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=reply_markup
            )
            return TIME
        
        if user_input == "üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
            contact_keyboard = [[KeyboardButton("üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]]
            reply_markup = ReplyKeyboardMarkup(contact_keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
                reply_markup=reply_markup
            )
            return CONTACTS
        
        context.user_data['contacts'] = user_input
        
        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_keyboard = [["‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"]]
        reply_markup = ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True)
        
        confirm_text = (
            f"‚úÖ *–ü–†–û–í–ï–†–¨–¢–ï –î–ê–ù–ù–´–ï –ó–ê–ü–ò–°–ò:*\n\n"
            f"üíÖ *–£—Å–ª—É–≥–∞:* {context.user_data['service']}\n"
            f"üìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* {context.user_data['date']}\n"
            f"‚è∞ *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {context.user_data['duration']} –º–∏–Ω.\n"
            f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {user_input}\n\n"
            f"–í—Å—ë –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–ø–∏—Å—å?"
        )
        
        await update.message.reply_text(confirm_text, reply_markup=reply_markup, parse_mode='Markdown')
        return CONFIRM

    async def confirm_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
        user_input = update.message.text
        
        if user_input in ["‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–¥–∞", "yes", "y", "–æ–∫", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é"]:
            try:
                user = update.effective_user
                booking_number = self.get_next_booking_number()
                
                booking_data = {
                    'id': booking_number,
                    'service': context.user_data['service'],
                    'date': context.user_data['date'],
                    'duration': context.user_data['duration'],
                    'contacts': context.user_data['contacts'],
                    'timestamp': datetime.now().isoformat(),
                    'chat_id': update.message.chat_id,
                    'user_id': user.id,
                    'username': user.username,
                    'first_name': user.first_name,
                    'last_name': user.last_name,
                    'status': 'pending'
                }
                
                if self.save_booking(booking_data):
                    await self.send_admin_notification(
                        context, booking_data, update.message.chat_id,
                        f"{user.first_name or ''} {user.last_name or ''}".strip() or user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                        context.user_data['contacts']
                    )
                    
                    # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
                    success_keyboard = [
                        ["üíÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", "üìä –ú–æ–∏ –∑–∞–ø–∏—Å–∏"],
                        ["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
                    ]
                    
                    reply_markup = ReplyKeyboardMarkup(success_keyboard, resize_keyboard=True)
                    
                    await update.message.reply_text(
                        f"üéâ *–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ü–ò–°–¨ #{booking_number} –°–û–ó–î–ê–ù–ê!*\n\n"
                        f"üíÖ *–£—Å–ª—É–≥–∞:* {context.user_data['service']}\n"
                        f"üìÖ *–î–∞—Ç–∞:* {context.user_data['date']}\n"
                        f"‚è∞ *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {context.user_data['duration']} –º–∏–Ω.\n"
                        f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {context.user_data['contacts']}\n\n"
                        "‚ö†Ô∏è *–≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å!*\n"
                        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üíñ",
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                    
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å #{booking_number}")
                else:
                    await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            # –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
            await self.main_menu(update, context)
        
        return ConversationHandler.END

    async def show_my_bookings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ)"""
        user_id = update.effective_user.id
        bookings = self.get_user_bookings(user_id)
        
        if not bookings:
            await update.message.reply_text(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.\n\n"
                "–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É?",
                reply_markup=ReplyKeyboardMarkup([["üíÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É"], ["üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
            )
            return
        
        bookings_text = "üìã *–í–ê–®–ò –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ó–ê–ü–ò–°–ò:*\n\n"
        for i, booking in enumerate(bookings, 1):
            status_emoji = "‚úÖ" if booking.get('status') == 'confirmed' else "‚è≥"
            status_text = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" if booking.get('status') == 'confirmed' else "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            bookings_text += (
                f"{i}. {status_emoji} *{booking['service']}*\n"
                f"   üìÖ {booking['date']}\n"
                f"   üî¢ ‚Ññ{booking['id']}\n"
                f"   üìû {booking.get('contacts', '–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã')}\n"
                f"   üè∑Ô∏è –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
            )
        
        await update.message.reply_text(bookings_text, parse_mode='Markdown')

    async def show_contacts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å—Ç—É–¥–∏–∏"""
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
        phone = STUDIO_CONTACTS['phone'].replace('(', '\\(').replace(')', '\\)').replace('+', '\\+')
        instagram = STUDIO_CONTACTS['instagram'].replace('@', '\\@')
        address = STUDIO_CONTACTS['address'].replace('.', '\\.').replace('-', '\\-')
        hours = STUDIO_CONTACTS['hours'].replace(':', '\\:')
        
        contacts_text = (
            "üìû *–ö–û–ù–¢–ê–ö–¢–´ –°–¢–£–î–ò–ò –ö–†–ê–°–û–¢–´*\n\n"
            f"üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
            f"üì∏ *Instagram:* {instagram}\n"
            f"üè† *–ê–¥—Ä–µ—Å:* {address}\n"
            f"üïê *–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:* {hours}\n\n"
            "üìç *–ú—ã –∂–¥–µ–º –≤–∞—Å –≤ –≥–æ—Å—Ç–∏!*"
        )
        
        try:
            await update.message.reply_text(contacts_text, parse_mode='Markdown')
        except BadRequest as e:
            # –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ Markdown
            logger.warning(f"Markdown parsing error, sending without formatting: {e}")
            contacts_text_plain = (
                "üìû –ö–û–ù–¢–ê–ö–¢–´ –°–¢–£–î–ò–ò –ö–†–ê–°–û–¢–´\n\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {STUDIO_CONTACTS['phone']}\n"
                f"üì∏ Instagram: {STUDIO_CONTACTS['instagram']}\n"
                f"üè† –ê–¥—Ä–µ—Å: {STUDIO_CONTACTS['address']}\n"
                f"üïê –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {STUDIO_CONTACTS['hours']}\n\n"
                "üìç –ú—ã –∂–¥–µ–º –≤–∞—Å –≤ –≥–æ—Å—Ç–∏!"
            )
            await update.message.reply_text(contacts_text_plain)

    async def about_studio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–∏–∏"""
        about_text = (
            "üíñ *–û –ù–ê–®–ï–ô –°–¢–£–î–ò–ò*\n\n"
            "–ú—ã - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç—É–¥–∏—è –∫—Ä–∞—Å–æ—Ç—ã, –≥–¥–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã!\n\n"
            "‚ú® *–ù–∞—à–∏ —É—Å–ª—É–≥–∏:*\n"
            "‚Ä¢ üßñ –õ–∞–∑–µ—Ä–Ω–∞—è —ç–ø–∏–ª—è—Ü–∏—è\n"
            "‚Ä¢ ‚òÄÔ∏è –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–≥–∞—Ä\n"
            "‚Ä¢ üíÖ –ú–∞–Ω–∏–∫—é—Ä –∏ –ø–µ–¥–∏–∫—é—Ä\n"
            "‚Ä¢ üíÑ –í–∏–∑–∞–∂–∏—Å—Ç\n"
            "‚Ä¢ üëÅÔ∏è –ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü\n\n"
            "üèÜ *–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n"
            "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
            "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥\n"
            "‚Ä¢ –£—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞\n\n"
            "*–ñ–¥–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏!* üí´"
        )
        await update.message.reply_text(about_text, parse_mode='Markdown')

    async def new_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å"""
        await self.start(update, context)

    async def main_menu_from_query(self, query):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ callback query"""
        keyboard = [
            ["üíÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É"],
            ["üìä –ú–æ–∏ –∑–∞–ø–∏—Å–∏", "‚ÑπÔ∏è –û —Å—Ç—É–¥–∏–∏"],
            ["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await query.message.reply_text("üíñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

    async def admin_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        if update.effective_user.id not in [ADMIN_ALL, ADMIN_MANICURE, ADMIN_OTHER]:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            conn = sqlite3.connect(DATABASE)
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM appointments')
            total = cursor.fetchone()[0]
            
            # –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            current_time = datetime.now()
            cursor.execute('SELECT date FROM appointments')
            active_bookings = 0
            for row in cursor.fetchall():
                try:
                    booking_datetime = datetime.strptime(row[0], "%d.%m.%Y %H:%M")
                    if booking_datetime >= current_time:
                        active_bookings += 1
                except:
                    continue
            
            conn.close()
            
            stats_text = (
                f"üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´:*\n\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}\n"
                f"‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {active_bookings}\n"
                f"‚Ä¢ –ü—Ä–æ—à–µ–¥—à–∏—Ö –∑–∞–ø–∏—Å–µ–π: {total - active_bookings}"
            )
            
            await update.message.reply_text(stats_text, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("üìä –ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏"""
        await self.main_menu(update, context)
        return ConversationHandler.END

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = (
            "ü§ñ *–ö–û–ú–ê–ù–î–´ –ë–û–¢–ê:*\n\n"
            "üíÖ /start - –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å\n"
            "üìä /mybookings - –º–æ–∏ –∑–∞–ø–∏—Å–∏\n"
            "üìû /contacts - –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å—Ç—É–¥–∏–∏\n"
            "üè† /menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚ÑπÔ∏è /help - —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏! üöÄ"
        )
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–µ–π"""
        try:
            conn = sqlite3.connect(DATABASE)
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM appointments')
            total = cursor.fetchone()[0]
            
            current_time = datetime.now()
            cursor.execute('SELECT date FROM appointments')
            active_bookings = 0
            for row in cursor.fetchall():
                try:
                    booking_datetime = datetime.strptime(row[0], "%d.%m.%Y %H:%M")
                    if booking_datetime >= current_time:
                        active_bookings += 1
                except:
                    continue
            
            conn.close()
            
            status_text = (
                f"üìä *–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:*\n\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}\n"
                f"‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {active_bookings}\n"
                f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ ‚úÖ"
            )
            
            await update.message.reply_text(status_text, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await update.message.reply_text("üìä –ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")

    def run(self):
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        self.application.run_polling()

if __name__ == '__main__':
    token = os.getenv('BOT_TOKEN')
    if not token:
        logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN!")
        print("ERROR: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: export BOT_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω'")
        exit(1)
    
    bot = BeautySalonBot(token)
    bot.run()