from flask import Flask, request
import os
import logging
import threading
import subprocess
import sys
from datetime import datetime

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
bot_process = None
bot_running = False

@app.route('/')
def home():
    return """
    <html>
        <head>
            <title>Beauty Salon Bot</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .status { padding: 20px; border-radius: 10px; margin: 20px 0; }
                .active { background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
                .inactive { background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
                .button { display: inline-block; padding: 10px 20px; margin: 5px; 
                         background-color: #007bff; color: white; text-decoration: none; 
                         border-radius: 5px; }
            </style>
        </head>
        <body>
            <h1>üíÖ Beauty Salon Bot</h1>
            <div class="status active">
                <h2>‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω</h2>
                <p>–ë–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã —Ä–∞–±–æ—Ç–∞–µ—Ç</p>
                <p>–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {}</p>
            </div>
            <div>
                <a href="/health-check" class="button">–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è</a>
                <a href="/status" class="button">–°—Ç–∞—Ç—É—Å</a>
                <a href="/restart" class="button">–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫</a>
            </div>
        </body>
    </html>
    """.format(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

@app.route('/health-check')
def health_check():
    """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        required_files = ['bot.py', 'app.py', '.env']
        for file in required_files:
            if not os.path.exists(file):
                return f"File {file} missing", 500
        
        return "OK", 200
    except Exception as e:
        return f"Error: {e}", 500

@app.route('/status')
def status():
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    status_info = {
        "status": "active",
        "service": "Beauty Salon Bot",
        "timestamp": datetime.now().isoformat(),
        "python_version": sys.version,
        "working_directory": os.getcwd(),
        "files": {
            "bot.py": os.path.exists('bot.py'),
            "app.py": os.path.exists('app.py'),
            ".env": os.path.exists('.env'),
            "bookings.json": os.path.exists('bookings.json'),
            "bookings.db": os.path.exists('bookings.db')
        }
    }
    return status_info

@app.route('/restart')
def restart():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        return "–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ scheduled tasks –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.", 200
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}", 500

@app.route('/start-bot')
def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    global bot_process, bot_running
    
    try:
        if bot_running:
            return "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω", 200
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        bot_process = subprocess.Popen([sys.executable, 'bot.py'], 
                                     stdout=subprocess.PIPE, 
                                     stderr=subprocess.PIPE)
        bot_running = True
        
        return "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", 200
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}", 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)