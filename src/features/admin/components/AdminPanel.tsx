
import React, { useState, useEffect, useMemo } from 'react';
import { persistence } from '../../../utils/persistence';
import './AdminPanel.css';

interface Booking {
  id: number;
  service: string;
  date: string;
  duration: number;
  contacts: string;
  timestamp: string;
  chat_id: number;
  user_id: number;
  username?: string;
  first_name?: string;
  last_name?: string;
  status: string;
}

interface AdminPanelProps {
  adminId: number;
}

const AdminPanel: React.FC<AdminPanelProps> = ({ adminId }) => {
  const [bookings, setBookings] = useState<Booking[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [dateFilter, setDateFilter] = useState('');

  useEffect(() => {
    loadBookings();
  }, []);

  const loadBookings = async () => {
    try {
      const storedBookings = await persistence.getItem('beauty_bookings');
      if (storedBookings) {
        setBookings(JSON.parse(storedBookings));
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π');
    } finally {
      setLoading(false);
    }
  };

  const filteredBookings = useMemo(() => {
    return bookings.filter(booking => {
      const matchesSearch = !searchTerm || 
        booking.service.toLowerCase().includes(searchTerm.toLowerCase()) ||
        booking.contacts.toLowerCase().includes(searchTerm.toLowerCase()) ||
        booking.date.toLowerCase().includes(searchTerm.toLowerCase()) ||
        booking.id.toString().includes(searchTerm);

      const matchesStatus = statusFilter === 'all' || booking.status === statusFilter;
      const matchesDate = !dateFilter || booking.date.startsWith(dateFilter);

      return matchesSearch && matchesStatus && matchesDate;
    });
  }, [bookings, searchTerm, statusFilter, dateFilter]);

  const deleteBooking = async (bookingId: number) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?')) return;

    try {
      const updatedBookings = bookings.filter(booking => booking.id !== bookingId);
      await persistence.setItem('beauty_bookings', JSON.stringify(updatedBookings));
      setBookings(updatedBookings);
      setSuccess('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
      setTimeout(() => setSuccess(''), 3000);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏');
    }
  };

  const updateBooking = async (bookingId: number, updates: Partial<Booking>) => {
    try {
      const updatedBookings = bookings.map(booking =>
        booking.id === bookingId ? { ...booking, ...updates } : booking
      );
      await persistence.setItem('beauty_bookings', JSON.stringify(updatedBookings));
      setBookings(updatedBookings);
      setSuccess('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      setTimeout(() => setSuccess(''), 3000);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
  };

  const getStatusBadge = (status: string) => {
    const statusMap: Record<string, string> = {
      pending: '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
      confirmed: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
      cancelled: '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞',
      completed: 'üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∞'
    };
    return statusMap[status] || status;
  };

  if (loading) return <div className="admin-loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π...</div>;

  return (
    <div className="admin-panel">
      <h1>üìä –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1>
      
      {error && <div className="admin-error">{error}</div>}
      {success && <div className="admin-success">{success}</div>}

      <div className="admin-filters">
        <input
          type="text"
          placeholder="üîç –ü–æ–∏—Å–∫..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="search-input"
        />
        
        <select
          value={statusFilter}
          onChange={(e) => setStatusFilter(e.target.value)}
          className="status-filter"
        >
          <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
          <option value="pending">‚è≥ –û–∂–∏–¥–∞–µ—Ç</option>
          <option value="confirmed">‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</option>
          <option value="cancelled">‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞</option>
          <option value="completed">üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∞</option>
        </select>

        <input
          type="date"
          value={dateFilter}
          onChange={(e) => setDateFilter(e.target.value)}
          className="date-filter"
        />
      </div>

      <div className="bookings-stats">
        <span>–í—Å–µ–≥–æ: {bookings.length}</span>
        <span>–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {filteredBookings.length}</span>
      </div>

      <div className="bookings-list">
        {filteredBookings.length === 0 ? (
          <div className="no-bookings">–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
        ) : (
          filteredBookings.map((booking) => (
            <div key={booking.id} className="booking-card">
              <div className="booking-header">
                <span className="booking-id">#{booking.id}</span>
                <span className={`booking-status status-${booking.status}`}>
                  {getStatusBadge(booking.status)}
                </span>
              </div>

              <div className="booking-details">
                {[
                  { label: 'üíÖ –£—Å–ª—É–≥–∞:', value: booking.service },
                  { label: 'üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:', value: booking.date },
                  { label: '‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', value: `${booking.duration} –º–∏–Ω.` },
                  { label: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:', value: booking.contacts },
                  { 
                    label: 'üë§ –ö–ª–∏–µ–Ω—Ç:', 
                    value: booking.first_name || booking.last_name 
                      ? `${booking.first_name || ''} ${booking.last_name || ''}`.trim()
                      : booking.username || '–ù–µ —É–∫–∞–∑–∞–Ω'
                  },
                  { label: 'üÜî User ID:', value: booking.user_id.toString() }
                ].map((item, index) => (
                  <div key={index} className="detail-row">
                    <span className="label">{item.label}</span>
                    <span>{item.value}</span>
                  </div>
                ))}
              </div>

              <div className="booking-actions">
                <div className="action-group">
                  <h4>–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å:</h4>
                  <select
                    value={booking.status}
                    onChange={(e) => updateBooking(booking.id, { status: e.target.value })}
                    className="status-select"
                  >
                    <option value="pending">‚è≥ –û–∂–∏–¥–∞–µ—Ç</option>
                    <option value="confirmed">‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</option>
                    <option value="cancelled">‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞</option>
                    <option value="completed">üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∞</option>
                  </select>
                </div>

                <div className="action-group">
                  <h4>–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:</h4>
                  <div className="datetime-inputs">
                    <input
                      type="date"
                      defaultValue={booking.date.split(' ')[0]}
                      className="date-input"
                      onBlur={(e) => {
                        const newDate = e.target.value;
                        const currentTime = booking.date.split(' ')[1];
                        if (newDate) {
                          updateBooking(booking.id, { date: `${newDate} ${currentTime}` });
                        }
                      }}
                    />
                    <input
                      type="time"
                      defaultValue={booking.date.split(' ')[1]}
                      className="time-input"
                      onBlur={(e) => {
                        const newTime = e.target.value;
                        const currentDate = booking.date.split(' ')[0];
                        if (newTime) {
                          updateBooking(booking.id, { date: `${currentDate} ${newTime}` });
                        }
                      }}
                    />
                  </div>
                </div>

                <button
                  onClick={() => deleteBooking(booking.id)}
                  className="delete-btn"
                >
                  üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default AdminPanel;
