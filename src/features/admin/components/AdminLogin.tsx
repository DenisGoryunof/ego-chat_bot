
import React, { useState } from 'react';
import './AdminLogin.css';

interface AdminLoginProps {
  onLogin: (userId: number) => void;
}

const AdminLogin: React.FC<AdminLoginProps> = ({ onLogin }) => {
  const [userId, setUserId] = useState('');
  const [error, setError] = useState('');
  const [showInstructions, setShowInstructions] = useState(false);

  const handleLogin = () => {
    const id = parseInt(userId);
    if (isNaN(id)) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    localStorage.setItem('current_user_id', id.toString());
    onLogin(id);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') handleLogin();
  };

  return (
    <div className="admin-login">
      <div className="login-container">
        <div className="login-header">
          <h1>ü§ñ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1>
          <h2>üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h2>
        </div>
        
        <div className="login-card">
          <p className="login-description">
            –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à User ID.
          </p>

          {error && <div className="login-error">{error}</div>}

          <div className="input-group">
            <label>üÜî User ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</label>
            <input
              type="number"
              value={userId}
              onChange={(e) => {
                setUserId(e.target.value);
                setError('');
              }}
              onKeyPress={handleKeyPress}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π ID"
              className="user-id-input"
            />
          </div>

          <button onClick={handleLogin} className="login-btn">
            üîí –í–æ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
          </button>

          <div className="instructions-toggle">
            <button onClick={() => setShowInstructions(!showInstructions)} className="toggle-btn">
              {showInstructions ? '‚ñ≤ –°–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏' : '‚ñº –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø?'}
            </button>
          </div>

          {showInstructions && (
            <div className="login-info">
              <h3>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø–∞</h3>
              
              <div className="instruction-step">
                <h4>1. üì± –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à User ID –≤ Telegram</h4>
                <p>–û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ <strong>@userinfobot</strong></p>
              </div>

              <div className="instruction-step">
                <h4>2. üîê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞</h4>
                <p>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ User ID</p>
              </div>

              <div className="instruction-step">
                <h4>3. üéØ –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É</h4>
                <p>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à User ID –≤ –ø–æ–ª–µ –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–í–æ–π—Ç–∏"</p>
              </div>
            </div>
          )}

          <div className="quick-test">
            <h4>üß™ –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø</h4>
            <div className="test-buttons">
              <button onClick={() => setUserId('1373071419')} className="test-btn">
                üíÖ –ú–∞–Ω–∏–∫—é—Ä (1373071419)
              </button>
              <button onClick={() => setUserId('1094720117')} className="test-btn">
                ‚ú® –î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏ (1094720117)
              </button>
              <button onClick={() => setUserId('130208292')} className="test-btn">
                üëë –ì–ª–∞–≤–Ω—ã–π (130208292)
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminLogin;
